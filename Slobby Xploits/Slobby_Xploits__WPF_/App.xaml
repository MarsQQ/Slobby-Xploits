<Application
	x:Class="Slobby_Xploits__WPF_.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Slobby_Xploits__WPF_">
	<Application.Resources>
		<ResourceDictionary>
			<FontFamily
				x:Key="Codicon">Assets/Fonts/#codicon</FontFamily>
			<FontFamily
				x:Key="Roboto">Assets/Fonts/#Roboto-Regular</FontFamily>
			<SolidColorBrush
				x:Key="PrimaryLighterColor"
				Color="#FF282828" />
			<SolidColorBrush
				x:Key="PrimaryLightColor"
				Color="#FF232323" />
			<SolidColorBrush
				x:Key="PrimaryWindowColor"
				Color="#FF1E1E1E" />
			<SolidColorBrush
				x:Key="PrimaryDarkColor"
				Color="#4b4b4b" />
			<SolidColorBrush
				x:Key="PrimaryDarkerColor"
				Color="#FF282828" />
			<SolidColorBrush
				x:Key="PrimaryTextColor"
				Color="White" />
			<Style
				x:Key="{x:Type Button}"
				TargetType="{x:Type Button}">
				<Setter
					Property="Control.Background"
					Value="{x:Null}" />
				<Setter
					Property="Control.Foreground"
					Value="{DynamicResource PrimaryTextColor}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<FrameworkTemplate.Resources>
								<ResourceDictionary>
									<Storyboard
										x:Key="Storyboard1">
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(UIElement.Opacity)"
											Storyboard.TargetName="hoverBorder">
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.2"
												Value="1">
												<EasingDoubleKeyFrame.EasingFunction>
													<QuadraticEase
														EasingMode="EaseInOut" />
												</EasingDoubleKeyFrame.EasingFunction>
											</EasingDoubleKeyFrame>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
									<Storyboard
										x:Key="Storyboard2">
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetProperty="(UIElement.Opacity)"
											Storyboard.TargetName="hoverBorder">
											<EasingDoubleKeyFrame
												KeyTime="0:0:0.2"
												Value="0">
												<EasingDoubleKeyFrame.EasingFunction>
													<QuadraticEase
														EasingMode="EaseInOut" />
												</EasingDoubleKeyFrame.EasingFunction>
											</EasingDoubleKeyFrame>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</ResourceDictionary>
							</FrameworkTemplate.Resources>
							<Grid>
								<Border
									Background="{TemplateBinding Control.Background}"
									CornerRadius="2" />
								<Border
									Name="hoverBorder"
									Background="{DynamicResource PrimaryDarkColor}"
									Opacity="0"
									CornerRadius="2" />
								<Border
									Name="activeBorder"
									Background="{DynamicResource PrimaryLightColor}"
									Opacity="0"
									CornerRadius="2" />
								<ContentPresenter
									Name="contentPresenter"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
									Margin="{TemplateBinding Control.Padding}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
									VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<TriggerBase.ExitActions>
										<BeginStoryboard
											Name="Storyboard2_BeginStoryboard"
											Storyboard="{StaticResource Storyboard2}" />
									</TriggerBase.ExitActions>
									<TriggerBase.EnterActions>
										<BeginStoryboard
											Storyboard="{StaticResource Storyboard1}" />
									</TriggerBase.EnterActions>
								</Trigger>
								<Trigger
									Property="ButtonBase.IsPressed"
									Value="True">
									<Setter
										TargetName="activeBorder"
										Property="UIElement.Opacity"
										Value="1" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										TargetName="activeBorder"
										Property="UIElement.Opacity"
										Value="0" />
									<Setter
										TargetName="hoverBorder"
										Property="UIElement.Opacity"
										Value="0" />
									<Setter
										TargetName="contentPresenter"
										Property="UIElement.Opacity"
										Value="0.5" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="TabScrollViewerStyle"
				TargetType="{x:Type ScrollViewer}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollViewer}">
							<Grid
								Name="Grid"
								Background="{TemplateBinding Control.Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="*" />
									<ColumnDefinition
										Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Height="Auto"
										MinHeight="17" />
									<RowDefinition
										Height="*" />
								</Grid.RowDefinitions>
								<Rectangle
									Name="Corner"
									Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
									Grid.Column="1"
									Grid.Row="0" />
								<ScrollContentPresenter
									Name="PART_ScrollContentPresenter"
									Margin="{TemplateBinding Control.Padding}"
									Content="{TemplateBinding ContentControl.Content}"
									ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
									Grid.Column="0"
									Grid.Row="1"
									CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
									CanHorizontallyScroll="False"
									CanVerticallyScroll="False" />
								<ScrollBar
									Name="PART_VerticalScrollBar"
									Cursor="Arrow"
									Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
									Grid.Column="1"
									Grid.Row="1"
									AutomationProperties.AutomationId="VerticalScrollBar"
									Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
									Minimum="0"
									ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
									Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ScrollBar
									Name="PART_HorizontalScrollBar"
									Cursor="Arrow"
									Grid.Row="0"
									Grid.Column="0"
									AutomationProperties.AutomationId="HorizontalScrollBar"
									Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
									Minimum="0"
									Orientation="Horizontal"
									ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
									Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="ScrollBarLineButton"
				TargetType="{x:Type RepeatButton}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type RepeatButton}">
							<Border
								Name="Border"
								Margin="1"
								CornerRadius="2">
								<Path
									Name="Arrow"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Fill="{DynamicResource PrimaryLighterColor}"
									Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="Arrow"
										Value="{DynamicResource PrimaryDarkColor}"
										Property="Shape.Fill" />
								</Trigger>
								<Trigger
									Property="ButtonBase.IsPressed"
									Value="True">
									<Setter
										TargetName="Arrow"
										Value="{DynamicResource PrimaryLightColor}"
										Property="Shape.Fill" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="ScrollBarPageButton"
				TargetType="{x:Type RepeatButton}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="Control.IsTabStop"
					Value="False" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type RepeatButton}">
							<Border
								Background="#00FFFFFF" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="ScrollBarThumb"
				TargetType="{x:Type Thumb}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="Control.IsTabStop"
					Value="False" />
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Thumb}">
							<Border
								Name="border"
								CornerRadius="2"
								Background="{DynamicResource PrimaryLighterColor}"
								Margin="1"
								BorderThickness="1" />
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Value="{DynamicResource PrimaryDarkColor}"
										Property="Border.Background" />
								</Trigger>
								<Trigger
									Property="Thumb.IsDragging"
									Value="True">
									<Setter
										TargetName="border"
										Value="{DynamicResource PrimaryLightColor}"
										Property="Border.Background" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<ControlTemplate
				x:Key="VerticalScrollBar"
				TargetType="{x:Type ScrollBar}">
				<Grid>
					<Track
						Name="PART_Track"
						IsDirectionReversed="True">
						<Track.DecreaseRepeatButton>
							<RepeatButton
								Command="ScrollBar.PageUpCommand"
								Style="{StaticResource ScrollBarPageButton}" />
						</Track.DecreaseRepeatButton>
						<Track.Thumb>
							<Thumb
								Margin="0,0,0,0"
								Style="{StaticResource ScrollBarThumb}" />
						</Track.Thumb>
						<Track.IncreaseRepeatButton>
							<RepeatButton
								Command="ScrollBar.PageDownCommand"
								Style="{StaticResource ScrollBarPageButton}" />
						</Track.IncreaseRepeatButton>
					</Track>
				</Grid>
			</ControlTemplate>
			<ControlTemplate
				x:Key="HorizontalScrollBar"
				TargetType="{x:Type ScrollBar}">
				<Grid>
					<Track
						Name="PART_Track"
						IsDirectionReversed="False">
						<Track.DecreaseRepeatButton>
							<RepeatButton
								Command="ScrollBar.PageLeftCommand"
								Style="{StaticResource ScrollBarPageButton}" />
						</Track.DecreaseRepeatButton>
						<Track.Thumb>
							<Thumb
								Margin="0,0,0,0"
								Style="{StaticResource ScrollBarThumb}" />
						</Track.Thumb>
						<Track.IncreaseRepeatButton>
							<RepeatButton
								Command="ScrollBar.PageRightCommand"
								Style="{StaticResource ScrollBarPageButton}" />
						</Track.IncreaseRepeatButton>
					</Track>
				</Grid>
			</ControlTemplate>
			<Style
				x:Key="{x:Type ScrollBar}"
				TargetType="{x:Type ScrollBar}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Style.Triggers>
					<Trigger
						Property="ScrollBar.Orientation"
						Value="Horizontal">
						<Setter
							Property="FrameworkElement.Width"
							Value="Auto" />
						<Setter
							Property="FrameworkElement.Height"
							Value="8" />
						<Setter
							Property="FrameworkElement.MinHeight"
							Value="8" />
						<Setter
							Property="Control.Template"
							Value="{StaticResource HorizontalScrollBar}" />
					</Trigger>
					<Trigger
						Property="ScrollBar.Orientation"
						Value="Vertical">
						<Setter
							Property="FrameworkElement.Width"
							Value="8" />
						<Setter
							Property="FrameworkElement.MinWidth"
							Value="8" />
						<Setter
							Property="FrameworkElement.Height"
							Value="Auto" />
						<Setter
							Property="Control.Template"
							Value="{StaticResource VerticalScrollBar}" />
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style
				x:Key="{x:Type ScrollViewer}"
				TargetType="{x:Type ScrollViewer}">
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollViewer}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition
										Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition
										Height="Auto" />
								</Grid.RowDefinitions>
								<ScrollContentPresenter
									Grid.Column="0" />
								<ScrollBar
									Name="PART_VerticalScrollBar"
									Grid.Row="0"
									Grid.Column="1"
									Value="{TemplateBinding ScrollViewer.VerticalOffset}"
									Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
									ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
									Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" />
								<ScrollBar
									Name="PART_HorizontalScrollBar"
									Orientation="Horizontal"
									Grid.Row="1"
									Grid.Column="0"
									Value="{TemplateBinding ScrollViewer.HorizontalOffset}"
									Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
									ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
									Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush
				x:Key="TabItem.Selected.Background"
				Color="#FFFFFF" />
			<SolidColorBrush
				x:Key="TabItem.Selected.Border"
				Color="#ACACAC" />
			<Style
				x:Key="{x:Type TabControl}"
				TargetType="{x:Type TabControl}">
				<Setter
					Property="Control.Padding"
					Value="2" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.Background"
					Value="{StaticResource TabItem.Selected.Background}" />
				<Setter
					Property="Control.BorderBrush"
					Value="{StaticResource TabItem.Selected.Border}" />
				<Setter
					Property="Control.BorderThickness"
					Value="1" />
				<Setter
					Property="Control.Foreground"
					Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TabControl}">
							<Grid
								Name="templateRoot"
								ClipToBounds="True"
								SnapsToDevicePixels="True"
								KeyboardNavigation.TabNavigation="Local">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Name="ColumnDefinition0" />
									<ColumnDefinition
										Name="ColumnDefinition1"
										Width="0" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Name="RowDefinition0"
										Height="Auto" />
									<RowDefinition
										Name="RowDefinition1"
										Height="*" />
								</Grid.RowDefinitions>
								<ScrollViewer
									HorizontalScrollBarVisibility="Auto"
									VerticalScrollBarVisibility="Hidden"
									Style="{DynamicResource TabScrollViewerStyle}">
									<TabPanel
										Name="headerPanel"
										KeyboardNavigation.TabIndex="1"
										Margin="6,2,6,0"
										IsItemsHost="True" />
								</ScrollViewer>
								<Border
									Name="contentPanel"
									Background="{DynamicResource PrimaryDarkerColor}"
									Grid.Column="0"
									KeyboardNavigation.DirectionalNavigation="Contained"
									Grid.Row="1"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local"
									CornerRadius="3">
									<ContentPresenter
										Name="PART_SelectedContentHost"
										ContentSource="SelectedContent"
										Margin="{TemplateBinding Control.Padding}"
										SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="TabControl.TabStripPlacement"
									Value="Bottom">
									<Setter
										TargetName="headerPanel"
										Property="Grid.Row"
										Value="1" />
									<Setter
										TargetName="contentPanel"
										Property="Grid.Row"
										Value="0" />
									<Setter
										TargetName="RowDefinition0"
										Property="RowDefinition.Height"
										Value="*" />
									<Setter
										TargetName="RowDefinition1"
										Property="RowDefinition.Height"
										Value="Auto" />
									<Setter
										TargetName="headerPanel"
										Property="FrameworkElement.Margin"
										Value="2,0,2,2" />
								</Trigger>
								<Trigger
									Property="TabControl.TabStripPlacement"
									Value="Left">
									<Setter
										TargetName="headerPanel"
										Property="Grid.Row"
										Value="0" />
									<Setter
										TargetName="contentPanel"
										Property="Grid.Row"
										Value="0" />
									<Setter
										TargetName="headerPanel"
										Property="Grid.Column"
										Value="0" />
									<Setter
										TargetName="contentPanel"
										Property="Grid.Column"
										Value="1" />
									<Setter
										TargetName="ColumnDefinition0"
										Property="ColumnDefinition.Width"
										Value="Auto" />
									<Setter
										TargetName="ColumnDefinition1"
										Property="ColumnDefinition.Width"
										Value="*" />
									<Setter
										TargetName="RowDefinition0"
										Property="RowDefinition.Height"
										Value="*" />
									<Setter
										TargetName="RowDefinition1"
										Property="RowDefinition.Height"
										Value="0" />
									<Setter
										TargetName="headerPanel"
										Property="FrameworkElement.Margin"
										Value="2,2,0,2" />
								</Trigger>
								<Trigger
									Property="TabControl.TabStripPlacement"
									Value="Right">
									<Setter
										TargetName="headerPanel"
										Property="Grid.Row"
										Value="0" />
									<Setter
										TargetName="contentPanel"
										Property="Grid.Row"
										Value="0" />
									<Setter
										TargetName="headerPanel"
										Property="Grid.Column"
										Value="1" />
									<Setter
										TargetName="contentPanel"
										Property="Grid.Column"
										Value="0" />
									<Setter
										TargetName="ColumnDefinition0"
										Property="ColumnDefinition.Width"
										Value="*" />
									<Setter
										TargetName="ColumnDefinition1"
										Property="ColumnDefinition.Width"
										Value="Auto" />
									<Setter
										TargetName="RowDefinition0"
										Property="RowDefinition.Height"
										Value="*" />
									<Setter
										TargetName="RowDefinition1"
										Property="RowDefinition.Height"
										Value="0" />
									<Setter
										TargetName="headerPanel"
										Property="FrameworkElement.Margin"
										Value="0,2,2,2" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										TargetName="templateRoot"
										Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
										Property="TextElement.Foreground" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="FocusVisual">
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
								Margin="2"
								SnapsToDevicePixels="True"
								Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
								StrokeThickness="1"
								StrokeDashArray="1 2" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<LinearGradientBrush
				x:Key="TabItem.Static.Background"
				EndPoint="0,1"
				StartPoint="0,0">
				<GradientStop
					Color="#F0F0F0"
					Offset="0.0" />
				<GradientStop
					Color="#E5E5E5"
					Offset="1.0" />
			</LinearGradientBrush>
			<SolidColorBrush
				x:Key="TabItem.Static.Border"
				Color="#ACACAC" />
			<LinearGradientBrush
				x:Key="TabItem.MouseOver.Background"
				EndPoint="0,1"
				StartPoint="0,0">
				<GradientStop
					Color="#ECF4FC"
					Offset="0.0" />
				<GradientStop
					Color="#DCECFC"
					Offset="1.0" />
			</LinearGradientBrush>
			<SolidColorBrush
				x:Key="TabItem.MouseOver.Border"
				Color="#7EB4EA" />
			<SolidColorBrush
				x:Key="TabItem.Disabled.Background"
				Color="#F0F0F0" />
			<SolidColorBrush
				x:Key="TabItem.Disabled.Border"
				Color="#D9D9D9" />
			<Style
				x:Key="{x:Type TabItem}"
				TargetType="{x:Type TabItem}">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{StaticResource FocusVisual}" />
				<Setter
					Property="Control.Foreground"
					Value="{DynamicResource PrimaryTextColor}" />
				<Setter
					Property="Control.Background"
					Value="{StaticResource TabItem.Static.Background}" />
				<Setter
					Property="Control.BorderBrush"
					Value="{StaticResource TabItem.Static.Border}" />
				<Setter
					Property="FrameworkElement.Margin"
					Value="0" />
				<Setter
					Property="Control.Padding"
					Value="6,2,6,2" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="Stretch" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Stretch" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TabItem}">
							<Grid
								Name="templateRoot"
								SnapsToDevicePixels="True">
								<Border
									Name="mainBorder"
									CornerRadius="3, 3, 0, 0"
									Margin="0">
									<Border
										Name="innerBorder"
										Background="{DynamicResource PrimaryDarkerColor}"
										Margin="-1"
										Opacity="0"
										CornerRadius="3,3,0,0" />
								</Border>
								<ContentPresenter
									Name="contentPresenter"
									ContentSource="Header"
									Focusable="False"
									Margin="{TemplateBinding Control.Padding}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
									HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
									VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="mainBorder"
										Value="{DynamicResource PrimaryDarkColor}"
										Property="Border.Background" />
								</Trigger>
								<Trigger
									Property="Selector.IsSelected"
									Value="True">
									<Setter
										TargetName="innerBorder"
										Property="UIElement.Opacity"
										Value="1" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush
				x:Key="ListBorder"
				Color="#828790" />
			<Style
				x:Key="{x:Type TreeView}"
				TargetType="{x:Type TreeView}">
				<Setter
					Property="Control.Background"
					Value="#222222" />
				<Setter
					Property="Control.BorderBrush"
					Value="{StaticResource ListBorder}" />
				<Setter
					Property="Control.BorderThickness"
					Value="1" />
				<Setter
					Property="Control.Padding"
					Value="1" />
				<Setter
					Property="Control.Foreground"
					Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter
					Property="ScrollViewer.HorizontalScrollBarVisibility"
					Value="Auto" />
				<Setter
					Property="ScrollViewer.VerticalScrollBarVisibility"
					Value="Auto" />
				<Setter
					Property="ScrollViewer.PanningMode"
					Value="Both" />
				<Setter
					Property="Stylus.IsFlicksEnabled"
					Value="False" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TreeView}">
							<Border
								Name="Bd"
								Background="#222222"
								CornerRadius="4"
								SnapsToDevicePixels="True">
								<ScrollViewer
									Name="_tv_scrollviewer_"
									Background="{TemplateBinding Control.Background}"
									CanContentScroll="False"
									Focusable="False"
									HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
									Padding="{TemplateBinding Control.Padding}"
									SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
									VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
									<ItemsPresenter />
								</ScrollViewer>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										TargetName="Bd"
										Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
										Property="Border.Background" />
								</Trigger>
								<Trigger
									Property="VirtualizingPanel.IsVirtualizing"
									Value="True">
									<Setter
										TargetName="_tv_scrollviewer_"
										Property="ScrollViewer.CanContentScroll"
										Value="True" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger
						Property="VirtualizingPanel.IsVirtualizing"
						Value="True">
						<Setter
							Property="ItemsControl.ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style
				x:Key="TreeViewItemFocusVisual">
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill"
				Color="#FF595959" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke"
				Color="#FF262626" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke"
				Color="#FF27C7F7" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.MouseOver.Fill"
				Color="#FFCCEEFB" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke"
				Color="#FF1CC4F7" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill"
				Color="#FF82DFFB" />
			<PathGeometry
				x:Key="TreeArrow"
				Figures="M0,0 L0,6 L6,0 z" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.Static.Fill"
				Color="#FFFFFFFF" />
			<SolidColorBrush
				x:Key="TreeViewItem.TreeArrow.Static.Stroke"
				Color="#FF818181" />
			<Style
				x:Key="ExpandCollapseToggleStyle"
				TargetType="{x:Type ToggleButton}">
				<Setter
					Property="UIElement.Focusable"
					Value="False" />
				<Setter
					Property="FrameworkElement.Width"
					Value="16" />
				<Setter
					Property="FrameworkElement.Height"
					Value="16" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ToggleButton}">
							<Border
								Background="#00FFFFFF"
								Height="16"
								Padding="5,5,5,5"
								Width="16">
								<Path
									Name="ExpandPath"
									Fill="{DynamicResource PrimaryTextColor}"
									Data="{StaticResource TreeArrow}">
									<UIElement.RenderTransform>
										<RotateTransform
											Angle="135"
											CenterY="3"
											CenterX="3" />
									</UIElement.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="ToggleButton.IsChecked"
									Value="True">
									<Setter
										TargetName="ExpandPath"
										Property="UIElement.RenderTransform">
										<Setter.Value>
											<RotateTransform
												Angle="180"
												CenterY="3"
												CenterX="3" />
										</Setter.Value>
									</Setter>
									<Setter
										TargetName="ExpandPath"
										Value="{DynamicResource PrimaryTextColor}"
										Property="Shape.Fill" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="{x:Type TreeViewItem}"
				TargetType="{x:Type TreeViewItem}">
				<Setter
					Property="Control.Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Control.HorizontalContentAlignment"
					Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter
					Property="Control.Padding"
					Value="2" />
				<Setter
					Property="Control.Foreground"
					Value="{DynamicResource PrimaryTextColor}" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{StaticResource TreeViewItemFocusVisual}" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TreeViewItem}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										MinWidth="19"
										Width="Auto" />
									<ColumnDefinition
										Width="Auto" />
									<ColumnDefinition
										Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<ToggleButton
									Name="Expander"
									ClickMode="Press"
									Style="{StaticResource ExpandCollapseToggleStyle}"
									IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
								<Border
									Name="Bd"
									CornerRadius="3"
									Background="#00FFFFFF"
									Grid.Row="0"
									Grid.Column="1"
									Padding="{TemplateBinding Control.Padding}"
									SnapsToDevicePixels="True">
									<ContentPresenter
										Name="PART_Header"
										ContentSource="Header"
										HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
								</Border>
								<ItemsPresenter
									Name="ItemsHost"
									Grid.ColumnSpan="2"
									Grid.Column="1"
									Grid.Row="1" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="TreeViewItem.IsExpanded"
									Value="False">
									<Setter
										TargetName="ItemsHost"
										Property="UIElement.Visibility"
										Value="Collapsed" />
								</Trigger>
								<Trigger
									Property="ItemsControl.HasItems"
									Value="False">
									<Setter
										TargetName="Expander"
										Property="UIElement.Visibility"
										Value="Hidden" />
								</Trigger>
								<Trigger
									Property="TreeViewItem.IsSelected"
									Value="True">
									<Setter
										Value="{DynamicResource PrimaryTextColor}"
										Property="Control.Foreground" />
									<Setter
										TargetName="Bd"
										Value="{DynamicResource PrimaryWindowColor}"
										Property="Border.Background" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="TreeViewItem.IsSelected"
											Value="True" />
										<Condition
											Property="TreeViewItem.IsSelectionActive"
											Value="False" />
									</MultiTrigger.Conditions>
									<Setter
										TargetName="Bd"
										Value="{DynamicResource PrimaryLighterColor}"
										Property="Border.Background" />
									<Setter
										Value="{DynamicResource PrimaryTextColor}"
										Property="Control.Foreground" />
								</MultiTrigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										TargetName="PART_Header"
										Property="UIElement.Opacity"
										Value="0.5" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger
						Property="VirtualizingPanel.IsVirtualizing"
						Value="True">
						<Setter
							Property="ItemsControl.ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<SolidColorBrush
				x:Key="OptionMark.Static.Background"
				Color="#FFFFFFFF" />
			<SolidColorBrush
				x:Key="OptionMark.Static.Border"
				Color="#FF707070" />
			<Style
				x:Key="OptionMarkFocusVisual">
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
								Margin="14,0,0,0"
								SnapsToDevicePixels="True"
								Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
								StrokeThickness="1"
								StrokeDashArray="1 2" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush
				x:Key="OptionMark.MouseOver.Background"
				Color="#FFF3F9FF" />
			<SolidColorBrush
				x:Key="OptionMark.MouseOver.Border"
				Color="#FF5593FF" />
			<SolidColorBrush
				x:Key="OptionMark.MouseOver.Glyph"
				Color="#FF212121" />
			<SolidColorBrush
				x:Key="OptionMark.Disabled.Background"
				Color="#FFE6E6E6" />
			<SolidColorBrush
				x:Key="OptionMark.Disabled.Border"
				Color="#FFBCBCBC" />
			<SolidColorBrush
				x:Key="OptionMark.Disabled.Glyph"
				Color="#FF707070" />
			<SolidColorBrush
				x:Key="OptionMark.Pressed.Background"
				Color="#FFD9ECFF" />
			<SolidColorBrush
				x:Key="OptionMark.Pressed.Border"
				Color="#FF3C77DD" />
			<SolidColorBrush
				x:Key="OptionMark.Pressed.Glyph"
				Color="#FF212121" />
			<SolidColorBrush
				x:Key="OptionMark.Static.Glyph"
				Color="#FF212121" />
			<Style
				x:Key="{x:Type CheckBox}"
				TargetType="{x:Type CheckBox}">
				<Setter
					Property="Control.Foreground"
					Value="{DynamicResource PrimaryTextColor}" />
				<Setter
					Property="FrameworkElement.Margin"
					Value="3" />
				<Setter
					Property="Control.BorderThickness"
					Value="1" />
				<Setter
					Property="Control.VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Control.Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type CheckBox}">
							<Grid
								Name="templateRoot"
								Background="#00FFFFFF"
								SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="Auto" />
									<ColumnDefinition
										Width="*" />
								</Grid.ColumnDefinitions>
								<Border
									Name="checkBoxBorder"
									CornerRadius="3"
									Background="{DynamicResource PrimaryDarkerColor}"
									HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
									Margin="1"
									VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
									Width="16"
									Height="16">
									<Grid
										Name="markGrid">
										<Path
											Name="optionMark"
											Data="F1 M9.97498,1.22334 L4.6983,9.09834 L4.52164,9.09834 L0,5.19331 L1.27664,3.52165 L4.255,6.08833 L8.33331,1.52588E-05 L9.97498,1.22334"
											Fill="{DynamicResource PrimaryTextColor}"
											Margin="1"
											Opacity="0"
											Stretch="None"
											HorizontalAlignment="Center"
											VerticalAlignment="Center" />
										<Border
											Name="indeterminateMark"
											CornerRadius="3"
											Background="{DynamicResource PrimaryTextColor}"
											Margin="2"
											Opacity="0"
											VerticalAlignment="Stretch" />
									</Grid>
								</Border>
								<ContentPresenter
									Name="contentPresenter"
									Grid.Column="1"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
									Margin="{TemplateBinding Control.Padding}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
									VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger
									Property="ContentControl.HasContent"
									Value="True">
									<Setter
										Property="FrameworkElement.FocusVisualStyle"
										Value="{StaticResource OptionMarkFocusVisual}" />
									<Setter
										Property="Control.Padding"
										Value="4,-1,0,0" />
								</Trigger>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="checkBoxBorder"
										Value="{DynamicResource PrimaryDarkColor}"
										Property="Border.Background" />
								</Trigger>
								<Trigger
									Property="UIElement.IsEnabled"
									Value="False">
									<Setter
										TargetName="checkBoxBorder"
										Property="Border.Background"
										Value="{StaticResource OptionMark.Disabled.Background}" />
									<Setter
										TargetName="checkBoxBorder"
										Property="UIElement.Opacity"
										Value="0.75" />
									<Setter
										TargetName="markGrid"
										Property="UIElement.Opacity"
										Value="0.5" />
								</Trigger>
								<Trigger
									Property="ButtonBase.IsPressed"
									Value="True">
									<Setter
										TargetName="checkBoxBorder"
										Value="{DynamicResource PrimaryLightColor}"
										Property="Border.Background" />
								</Trigger>
								<Trigger
									Property="ToggleButton.IsChecked"
									Value="true">
									<Setter
										TargetName="checkBoxBorder"
										Value="{DynamicResource PrimaryWindowColor}"
										Property="Border.Background" />
									<Setter
										TargetName="optionMark"
										Property="UIElement.Opacity"
										Value="1" />
									<Setter
										TargetName="indeterminateMark"
										Property="UIElement.Opacity"
										Value="0" />
								</Trigger>
								<Trigger
									Property="ToggleButton.IsChecked"
									Value="{x:Null}">
									<Setter
										TargetName="checkBoxBorder"
										Value="{DynamicResource PrimaryWindowColor}"
										Property="Border.Background" />
									<Setter
										TargetName="optionMark"
										Property="UIElement.Opacity"
										Value="0" />
									<Setter
										TargetName="indeterminateMark"
										Property="UIElement.Opacity"
										Value="1" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Application.Resources>
</Application>
